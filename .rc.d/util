#!/bin/bash
#
# General utility functions.

# Find large files under a directory.
duf() {
  if (($# < 1)); then
    echo "Usage: duf <path>"
    return 1
  fi

  find $1 -type f -exec du -h {} \; | sort -h -r | head -n 20
}

# JSON friendly cURL call.
jcurl() {
  if (($# < 1)); then
    echo "Usage: jcurl <url>"
    return 1
  fi

  curl --header "Accept: application/json" --silent $1 | jq
}

# Convert JSON to YAML.
json2yaml() {
  python -c "
import json, yaml, sys;
yaml.safe_dump(json.load(sys.stdin), sys.stdout, default_flow_style=False)" < \
    $1 >$2
}

update_ps1() {
  local current_aws_role=$(echo $AWS_ROLE)
  current_aws_role=${current_aws_role:-"default"}
  local current_git_branch=$(git_current_branch)
  local current_kubernetes_context=$(kubernetes_get_context)

  export PS1="\[\033[01;32m\]\u@\h\[\033[01;34m\] // $(pwd) // ${current_git_branch} // ${current_kubernetes_context} // ${current_aws_role} \n \W \$\[\033[00m\] "
}

# Open a TCP port on the default interface.
open_port() {
  if (($# < 1)); then
    echo "Usage: fwopen <port>"
    return 1
  fi

  sudo firewall-cmd --add-port="${1}/tcp"
  sudo firewall-cmd --list-ports | grep $1
}

# Pause for a keystroke.
pause() {
  if grep 'bash' <<<$(echo $SHELL); then
    read -p "Press enter to continue."
  else
    read \?"Press enter to continue."
  fi
}

# Find all files with names containing a string.
search() {
  if (($# < 1)); then
    echo "Usage: search <thing>"
    return 1
  fi

  find . -name "*$1*"
}

# Start a file server.
serve() {
  if (($# < 1)); then
    echo "Usage: serve <port>"
    return 1
  fi

  python -m http.server -b 0.0.0.0 -d . $1
}

# Loop-driven watch
lwatch() {
  while true; do
    clear
    echo "Every 10.0s: ${@}"
    echo "$(date)"
    echo
    $@
    sleep 10
  done
}

# Perform a search across YAML files with yq syntax.
yqrep() {
  if (($# < 1)); then
    echo "Usage: yqrep <query>"
    return 1
  fi

  local files=$(find . -name '*.yaml')
  for f in $files; do
    local yq_eval=$(yq --colors eval "${1}" "${f}")
    if [[ $yq_eval != "" ]]; then
      echo $f
      echo "${yq_eval}"
      echo
    fi
  done
}
